import type { CueSheet } from './types.js';

/**
 * YouTube timeline serializer for CUE sheets
 */

/**
 * Serialize CUE sheet to YouTube timeline format
 * @param cueSheet - Parsed CUE sheet object
 * @returns YouTube timeline string
 */
export function serializeYouTubeTimeline(cueSheet: CueSheet): string {
  const lines: string[] = [];

  // Add header
  lines.push('ðŸŽµ Tracklist :');
  lines.push('');

  // Add each track
  cueSheet.tracks.forEach((track) => {
    const performer = track.performer || '';
    const title = track.title || 'Untitled';

    // Get the main index time (usually INDEX 01)
    let timeStr = '00:00:00';
    if (track.indexes && track.indexes.length > 0) {
      // Find INDEX 01, or use the last index if INDEX 01 doesn't exist
      const mainIndex = track.indexes.find(idx => idx.number === 1) || track.indexes[track.indexes.length - 1];
      if (mainIndex && mainIndex.time) {
        // For YouTube timeline, use HH:MM:SS format
        const hours = mainIndex.time.hour;
        const minutes = mainIndex.time.minute;
        const seconds = mainIndex.time.second;

        timeStr = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
      }
    }

    if (performer.trim() === '') {
      lines.push(`${timeStr} ${title}`);
    } else {
      lines.push(`${timeStr} ${performer} - ${title}`);
    }
  });
  lines.push('');
  lines.push('Generated by melocilde/cue-parser');

  return lines.join('\n');
}